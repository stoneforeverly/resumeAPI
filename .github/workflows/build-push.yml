name: Deploy Resume Backend to ECR

on:
  workflow_dispatch:
   # 新增以下配置，允许被其他工作流调用
  workflow_call:
    inputs:
      VITE_SERVER_HOST:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: resume_backend-repo
  DOCKER_COMPOSE_FILE: docker-compose.yml
  IMAGE_TAG: ${{ github.sha }}
  KEEP_LAST_IMAGES: 4

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > .env

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Frontend
        run: |
          docker compose -p myproject -f ${{ env.DOCKER_COMPOSE_FILE }} build frontend
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          # 推送带 SHA 和 latest 双标签
          FRONTEND_SHA_TAG="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:frontend-${{ env.IMAGE_TAG }}"
          FRONTEND_LATEST_TAG="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:frontend-latest"
          docker tag myproject-frontend:latest $FRONTEND_SHA_TAG
          docker tag myproject-frontend:latest $FRONTEND_LATEST_TAG
          docker push $FRONTEND_SHA_TAG
          docker push $FRONTEND_LATEST_TAG

      - name: Build and Push Backend
        run: |
          docker compose -p myproject -f ${{ env.DOCKER_COMPOSE_FILE }} build backend
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          # 推送带 SHA 和 latest 双标签
          BACKEND_SHA_TAG="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:backend-${{ env.IMAGE_TAG }}"
          BACKEND_LATEST_TAG="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:backend-latest"
          docker tag myproject-backend:latest $BACKEND_SHA_TAG
          docker tag myproject-backend:latest $BACKEND_LATEST_TAG
          docker push $BACKEND_SHA_TAG
          docker push $BACKEND_LATEST_TAG

      - name: Cleanup old images
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPO_NAME=${{ env.ECR_REPOSITORY }}
          
          # 获取所有镜像并按推送时间排序（排除 latest 标签）
          IMAGE_TAGS=$(aws ecr describe-images --repository-name $REPO_NAME \
            --query 'sort_by(imageDetails, &imagePushedAt)[*].imageTags' \
            --output text | tr '\t' '\n' | grep -v "latest" | sort -u)
          
          TOTAL_IMAGES=$(echo "$IMAGE_TAGS" | wc -l)
          IMAGES_TO_DELETE=$((TOTAL_IMAGES - ${{ env.KEEP_LAST_IMAGES }}))
          
          if [ $IMAGES_TO_DELETE -gt 0 ]; then
            echo "Deleting $IMAGES_TO_DELETE old images"
            OLD_TAGS=$(echo "$IMAGE_TAGS" | head -n $IMAGES_TO_DELETE)
            for TAG in $OLD_TAGS; do
              aws ecr batch-delete-image \
                --repository-name $REPO_NAME \
                --image-ids imageTag=$TAG
            done
          else
            echo "No images to delete"
          fi
